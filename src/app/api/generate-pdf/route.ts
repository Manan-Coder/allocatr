
import jsPDF from 'jspdf';
import 'jspdf-autotable';
declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: {
      startY?: number;
      head?: string[][];
      body?: string[][];
      theme?: 'striped' | 'grid' | 'plain';
      headStyles?: {
        fillColor?: number[];
        textColor?: number[];
        fontSize?: number;
        fontStyle?: string;
      };
      bodyStyles?: {
        textColor?: number[];
        fontSize?: number;
      };
      alternateRowStyles?: {
        fillColor?: number[];
      };
      columnStyles?: {
        [key: number]: {
          halign?: 'left' | 'center' | 'right';
          cellWidth?: number;
        };
      };
      margin?: {
        left?: number;
        right?: number;
      };
    }) => jsPDF;
  }
}

interface TeamMember {
  id: number;
  name: string;
  speciality: string;
  hoursPerDay: number;
}

interface Project {
  task: string;
  createdAt: string;
}

interface TeamAllocation {
  project: Project;
  teamMembers: TeamMember[];
  totalMembers: number;
  totalHoursPerDay: number;
}

interface ApiResponse {
  error?: string;
  success?: boolean;
}

export async function POST(request: Request): Promise<Response> {
  try {
    const teamData: TeamAllocation = await request.json()
    if (!teamData || !teamData.project || !teamData.teamMembers || !Array.isArray(teamData.teamMembers)) {
      return Response.json({ error: 'Invalid team data structure' } as ApiResponse, {
        status: 400,
      });
    }
    if (teamData.teamMembers.length === 0) {
      return Response.json({ error: 'No team members provided' } as ApiResponse, {
        status: 400,
      });
    }
    const doc = new jsPDF();
    const primaryColor = '#e26e47';
    const textColor = '#2b2b28';

    doc.setFontSize(28);
    doc.setTextColor(primaryColor);
    doc.text('Team Allocation Report', 20, 25);
    doc.setFontSize(16);
    doc.setTextColor(textColor);
    doc.text('Generated by Allocatr', 20, 35);
    doc.setFontSize(10);
    doc.setTextColor('#666666');
    const createdDate = new Date(teamData.project.createdAt).toLocaleDateString();
    doc.text(`Created: ${createdDate}`, 20, 45);
    doc.setFontSize(16);
    doc.setTextColor(primaryColor);
    doc.text('Project Details', 20, 60);
    
    doc.setFontSize(12);
    doc.setTextColor(textColor);
    doc.text('Task Description:', 20, 70);
    const taskText: string = teamData.project.task || 'No task description provided';
    const splitTask = doc.splitTextToSize(taskText, 170);
    doc.text(splitTask, 20, 80);

    let currentY: number = 80 + (Array.isArray(splitTask) ? splitTask.length * 5 : 5) + 10;

    doc.setFontSize(16);
    doc.setTextColor(primaryColor);
    doc.text('Project Summary', 20, currentY);
    currentY += 15;
    
    doc.setFontSize(12);
    doc.setTextColor(textColor);
    doc.text(`Total Team Members: ${teamData.totalMembers}`, 20, currentY);
    currentY += 8;
    doc.text(`Total Hours per Day: ${teamData.totalHoursPerDay}`, 20, currentY);
    currentY += 20;

    doc.setFontSize(16);
    doc.setTextColor(primaryColor);
    doc.text('Team Members', 20, currentY);
    currentY += 10;

    const tableColumns: string[] = ['ID', 'Name', 'Speciality', 'Hours/Day'];
    const tableRows: string[][] = teamData.teamMembers.map((member: TeamMember) => [
      member.id.toString(),
      member.name || 'N/A',
      member.speciality || 'N/A',
      member.hoursPerDay.toString()
    ]);
    
 
    doc.autoTable({
      startY: currentY,
      head: [tableColumns],
      body: tableRows,
      theme: 'striped',
      headStyles: {
        fillColor: [226, 110, 71], 
        textColor: [255, 255, 255],
        fontSize: 12,
        fontStyle: 'bold'
      },
      bodyStyles: {
        textColor: [43, 43, 40], 
        fontSize: 11
      },
      alternateRowStyles: {
        fillColor: [248, 248, 246]
      },
      columnStyles: {
        0: { halign: 'center', cellWidth: 20 },
        1: { cellWidth: 50 },
        2: { cellWidth: 60 },
        3: { halign: 'center', cellWidth: 30 }
      },
      margin: { left: 20, right: 20 }
    });
    

    const pageCount: number = (doc.internal as any).getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setTextColor('#999999');
      doc.text(
        `Page ${i} of ${pageCount} | Generated by Allocatr`,
        20,
        (doc.internal as any).pageSize.height - 10
      );
    }

    const pdfBuffer: ArrayBuffer = doc.output('arraybuffer');

    return new Response(pdfBuffer, {
      status: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="team-allocation-${Date.now()}.pdf"`
      }
    });
    
  } catch (error: unknown) {
    console.error('Error generating PDF:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    
    return Response.json({ error: `Failed to generate PDF: ${errorMessage}` } as ApiResponse, {
      status: 500,
    });
  }
}
